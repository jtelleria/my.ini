[mysqld]
datadir=C:/Program Files/MariaDB 10.3/data
port=3306

[mysqld]

############################################################################################################################
############################################################################################################################
############################################################################################################################
# MariaDB ROCKSDB Engine Server Variables Performance-Tuning (Optimized 50/50 Snappy)
############################################################################################################################
############################################################################################################################
############################################################################################################################

skip-innodb
default_storage_engine=rocksdb
collation_server = latin1_bin

#############################################################################################################################
# rocksdb_block_size
#############################################################################################################################
# NOTES:
# a) I/O Unit (Not fully Aligned). 
# b) Default is 4KB. 16 KB gives better space savings, but needs extra CPU for decompression. 
# c) Measure trade-offs between 4K, 8K, 16K and 32 K.
# d) Check the size of data of the block cache in DB_BLOCK_CACHE_USAGE Column of the INFORMATION_SCHEMA.ROCKSDB_DBSTATS table.

rocksdb_block_size = 8192 # Default Value: 4096 (4K)

#############################################################################################################################
# rocksdb_block_cache_size
#############################################################################################################################
# DESCRIPTION: Block_cache size for RocksDB.

# NOTES: RocksDB’s Internal Cache. Similar to innodb_buffer_pool_size, but less important since RocksDB relies on OS cache too.
# Set Variable depending on objective "Commit(kB)" to be set in RAM Memory by the "mysqld" process.

rocksdb_block_cache_size = 1G # Default: 512 MB

#############################################################################################################################
# ROCKSDB WAL Configuration Settings
#############################################################################################################################
# NOTES:
# Control Maximum WAL Size. 
# Setting as large as total InnoDB Log Size would be fine.

rocksdb_max_total_wal_size = 2G 			# Default: 0

# rocksdb_wal_dir: Recommended to set the WAL path on a different SSD (Whenever its possible).

#############################################################################################################################
# rocksdb_max_background_jobs
#############################################################################################################################
# DEFINITION: Maximum number of concurrent background jobs, including flushes  and compactions. RocksDB will automatically 
# decide how to allocate the available job slots to flushes and compactions.
# VALUE RANGE: -1 to 64.
# DEFAULT: 2.
# WARNING: This option must be used with MariaDB 10.3.8 as “rocksdb_max_background_compactions”  
# and “rocksdb_max_background_flushes” variables have been DEPRECATED.

rocksdb_max_background_jobs = 6

#############################################################################################################################
# rocksdb_lock_wait_timeout
#############################################################################################################################
# DESCRIPTION: Number of seconds to wait for lock.

rocksdb_lock_wait_timeout = 2 # Default: 1

#############################################################################################################################
# rocksdb_max_open_files
#############################################################################################################################
# NOTE: 
# a) Increase file descriptor limit for mysqld process (Increase nofile in /etc/security/limits.conf)
# b) If setting greater than 0, RocksDB still uses table_cache, which will lock a mutex every time you access the file. 
#    I think you'll see much greater benefit with -1 because then you will not need to go through LRUCache to get the table you 
#    need.
#
# IMPORTANT: Keep all files Open! (-1)
#
rocksdb_max_open_files = -1 # Default Value: -1

#############################################################################################################################
# rocksdb_db_write_buffer_size
#############################################################################################################################
# DESCRIPTION: This is the maximum size of all Write Buffers across all Collumn Families in the database.
# It represents the amount of data to build up in memory (backed by an unsorted log on disk) across all
# column families before writing to a sorted on-disk file.
#
# "Total size of memtables across column families". This can be used to manage the total memory used by memtables.
#
# This is distinct from write_buffer_size, which enforces a limit for a single memtable.
#
# By default this feature is disabled (by being set to 0). You should not need to change it. 

rocksdb_db_write_buffer_size = 1G # Default Value: 0 (Disabled).

#############################################################################################################################
# Other Configurations (CF Options)
#############################################################################################################################

rocksdb_table_cache_numshardbits = 4 			# Default: 6. Optimal 50/50 Snappy: 4.

# -----------------------------------------------------------------------------------
# Options to Enable or Disable
# -----------------------------------------------------------------------------------

# NOTE: "allow_mmap_reads" cannot be used with "use_direct_reads" or "use_direct_io_for_flush_and_compaction". Otherwise Server
#       CRASHES.

rocksdb_allow_mmap_reads = 1 				# Default: 0 # Useful for SSD Disks. Do not set with Spinning Disks.
rocksdb_allow_mmap_writes = 0 				# Default: 0
rocksdb_use_fsync = 0 					# Default: 0
rocksdb_use_adaptive_mutex = 0 				# Default: 0

# -----------------------------------------------------------------------------------
# Rate Limiter
# -----------------------------------------------------------------------------------

rocksdb_bytes_per_sync = 512000				# Default: 0. Optimal: 512 KB.
rocksdb_wal_bytes_per_sync = 4194304			# Default: 0. Set to 4MB.
rocksdb_rate_limiter_bytes_per_sec = 314572800  	# Default: 0. Set to 300MB/s. Increase if you're running on higher.

# -----------------------------------------------------------------------------------
# Triggering Compaction if there are many Sequential Deletes
# -----------------------------------------------------------------------------------
# NOTE: DESCRIPTION: "RocksDB will trigger compaction for the file if it has more than the specified number 
#                    of sequential deletes per window".

rocksdb_compaction_sequential_deletes_count_sd=1 	# Default: 0
rocksdb_compaction_sequential_deletes=199999		# Default: 0
rocksdb_compaction_sequential_deletes_window=200000 	# Default: 0

# -----------------------------------------------------------------------------------
# Max Subcompactations
# -----------------------------------------------------------------------------------
# DESCRIPTION: This value represents the maximum number of threads that will concurrently perform a compaction job by breaking it into multiple,
# 	       smaller ones that are run simultaneously.
# DEFAULT:     1 (i.e. no subcompactions)
#
# NOTES: L0 to L1 compaction cannot be parallelized. In some cases, it may become a bottleneck that limit the total 
# compaction speed. In this case, users can set max_subcompactions to more than 1. In this case, we'll try to partition the 
# range and use multiple threads to execute it.
#
# Set up compression more aggressively and allocate more threads for flush and compaction.

rocksdb_max_subcompactions=2 				# Default: 1

#############################################################################################################################
# Override cf options for RocksDB.
#############################################################################################################################

rocksdb_default_cf_options="write_buffer_size=512m;max_bytes_for_level_base=1024m;target_file_size_base=128m;max_bytes_for_level_multiplier=10;max_write_buffer_number=2;min_write_buffer_number_to_merge=2;target_file_size_multiplier=1;level0_file_num_compaction_trigger=1;level0_slowdown_writes_trigger=6;level0_stop_writes_trigger=7;source_compaction_factor=2;max_grandparent_overlap_factor=10"

#-------------------------------------------------------------
# MOST IMPORTANT SETTINGS: Optimal 50/50 Snappy
#-------------------------------------------------------------

# write_buffer_size:        Sets the size of a single memtable. Once memtable exceeds this size, it is marked immutable and
#                           a new one is created.It represents the amount of data to build up in memory (backed by an unsorted 
#                           log on disk) before converting to a sorted on-disk file. The default is 64 MB.
#                           You need to budget for 2 x your worst case memory use. If you don't have enough memory for this,
#                           you should reduce this value.
#                          
#                           "You can think of memtables as in-memory write buffers. Each new key-value pair is first written
#                           to the memtable. Memtable size is controlled by the option write_buffer_size. It's usually not a
#                           big memory consumer. However, memtable size is inversely proportional to write amplification
#                           -- the more memory you give to the memtable, the less the write amplification is.
#
#                           If you increase your memtable size, be sure to also increase your L1 size! L1 size is controlled by
#                           the option *"max_bytes_for_level_base"*.
#
#			    Baseline: 256 MB. Optimized 50/50 Snappy: 512MB
#
# max_bytes_for_level_base: Write amplification. *"max_bytes_for_level_base"* is total size of level 1. As mentioned, we recommend
#                           that this be around the size of level 0. Each subsequent level is *"max_bytes_for_level_multiplier"*
#                           larger than previous one. The default is 10 and we do not recommend changing that.
#                           It could be Set Same Value than "Cache Size".
#
# target_file_size_base:    "Default Value is 64MB". Increasing "*target_file_size_base*" will reduce total number of database files, 
#                           which is generally a good thing. We recommend setting target_file_size_base to be 
#                           *"max_bytes_for_level_base*" / 10, so that there are 10 files in level 1".
#
# max_bytes_for_level_multiplier: 	Default: 10 (Optimal Value).
#
# target_file_size_multiplier: 		Optimal Value: 1
#
# compression:				Default: Snappy (Optimal).
#
#-------------------------------------------------------------
# OTHER SETTINGS:
#-------------------------------------------------------------

# min_write_buffer_number_to_merge:	"Minimum number of memtables to be merged before flushing to storage.
#
#                                       For example:
#                                       * If this option is set to 2, immutable memtables are only flushed when there are 2 of them
#                                         - a single immutable memtable will never be flushed. 
# 					* If multiple memtables are merged together, less data may be written to storage since two updates 
#					  are merged to a single key.
#
#                                       Recommended Value: 4 (Optimal 50/50 Snappy).

# level0_file_num_compaction_trigger:   "Number of files to trigger level-0 compaction. A value <0 means that level-0 compaction will
#				        not be triggered by number of files at all". Default: 4.
#
# 				        For example, if level0_file_num_compaction_trigger = 8 and every flushed file is 100MB. 
#                                       Then as soon as there is 8 files, they are compacted to one 800MB file. And after we have 8
#                                       new 100MB files, they are compacted in the second 800MB, and so on. Eventually we'll have a list
#                                       of 800MB files and no more than 8 100MB files.
#
#					Optimal Value: 1.

# max_write_buffer_number: " When the number of memtables waiting to flush is greater or equal to max_write_buffer_number, writes are
#			   fully stopped to wait for flush finishes.
#
#                          The number of in-memory memtables. Each memtable is of size write_buffer_size.
#
#                          Default: 2. Recommended Value: Same as "Total Physical CPU"

# level0_slowdown_writes_trigger: 	If level0_slowdown_writes_trigger, a limited write rate to DB is activated.
#
#                                       Recommended Value: Same as "Total Physical CPU" x3
#
# level0_stop_writes_trigger: 		If level0_stop_writes_trigger, writes to DB are stopped.
#
#                                       Recommended Value: Same as "Total Physical CPU" x3.5
#
# source_compaction_factor:		Maximum number of bytes in all source files to be compacted in a single compaction run. 
#
#					Default: 1. Optimal 50/50 Snappy: 2
#
# max_grandparent_overlap_factor:       Only for level-based compactions. Default: 10. Optimal 50/50 Snappy: 10

#############################################################################################################################
# Options to Use with Spinning Disks
#############################################################################################################################
# Throughput gap between random read vs. sequential read is much higher in spinning disks. Suggestions:

#---------------------------------------------------------
# Compaction Readahead Size
#---------------------------------------------------------
#If non-zero, we perform bigger reads when doing compaction. If you're running RocksDB on spinning disks, you should set this to
# at least 2MB (e.g: 16MB). We enforce it to be 2MB if you don't set it with direct I/O.

rocksdb_compaction_readahead_size=0 			# Default: 0

#---------------------------------------------------------
# Direct Reads
#---------------------------------------------------------
# NOTE: * "allow_mmap_reads" cannot be used with "use_direct_reads" or "use_direct_io_for_flush_and_compaction"
# 	* "allow_mmap_writes" cannot be used with "use_direct_io_for_flush_and_compaction", i.e., they cannot be set to true at
#         the same time.

rocksdb_use_direct_reads=0				# Default: 0
rocksdb_use_direct_io_for_flush_and_compaction=0	# Default: 0

#############################################################################################################################
# Data Loading: Bulk Load
#############################################################################################################################
# DESCRIPTION: Commit rows implicitly every rocksdb_bulk_load_size, on bulk load/insert, update and delete.
# NOTE: Session Variables.

rocksdb_commit_in_the_middle = 1 			# Default: 0

# Maximum number of locks a transaction can have:
rocksdb_max_row_locks = 1048576

[client]
port=3306
plugin-dir=C:/Program Files/MariaDB 10.3/lib/plugin
